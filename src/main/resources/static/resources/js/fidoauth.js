$(function(){
	$(".userCreate button[type=submit]").click(makeCredential);
	$(".fidoLogin button[type=submit]").click(getAssertion);
});

function log(message) {
    console.log(message);
}

function signInWithPassword() {
    // If Windows Hello is supported and there is no existing credential, offer to register Windows Hello
    if (window.webauthn && !(window.sessionStorage && window.sessionStorage.getItem('credentialID'))) {
        window.location = 'fidoregister.html';
    }
    // Otherwise, go to the inbox
    else {
        window.location = 'inbox.html';
    } 
}

function sendToServerCredential(cred) {
    // This is where you would send data to the server
	var savedCred = 
	{
		credId : cred.credential.id,
		publicKey : JSON.stringify(cred.publicKey)
	};
	
	$.ajax({
		type : 'post',
		url : '/fido/makeCredential',
		data : savedCred,
		dataType : 'json',
		success : function (result, status) {
			log("Create credential data success");
			
			if (result.status == true) {
				document.getElementById('user').submit();
			} else {
				alert("FIDO 정보 저장 실패");
			}
		},
		error : function (xhr, status) {
			log(status);
			
			alert("FIDO 정보 저장 실패");
		}
	});
}


function sendToServerAssertion(assert, challenge) {
	var sendAssert = 
	{
		credId : assert.credential.id,
		clientData : assert.clientData,
		authnrData : assert.authenticatorData,
		signature : assert.signature,
		challenge : challenge
	};
	
	$.ajax({
		type : 'post',
		url : '/fido/verifyAssertion',
		data : sendAssert,
		dataType : 'json',
		success : function (result, status) {
			log("Verify assertion data success");
			
			if (result.status == true) {
				location.href = "/"; 
			} else {
				alert("로그인 실패\r\n" + result.message);
			}
		},
		error : function (result, status) {
			alert("로그인 실패\r\n" + result.message);
		}
	});
}

// Register user with FIDO 2.0
function makeCredential(e) {
	e.preventDefault();
	
    try {
    	var inId = document.getElementById('userId').value;
    	var inName = document.getElementById('name').value;
    	var inEmail = document.getElementById('email').value;
    	
        // This information would normally come from the server
        var accountInfo = {
            rpDisplayName: 'Contoso',           // Name of relying party
            displayName: inName,            	// Name of user account in relying partying
            name: inEmail,        				// Detailed name of account
            id: inId  			            	// Account identifier
        };
        
        var cryptoParameters = [
            {
                type: 'FIDO',
                algorithm: 'RSASSA-PKCS1-v1_5'
            }
        ];

        // The challenge is typically a random quantity generated by the server
        // This ensures that any assertions are freshly generated and not replays
        var attestationChallenge = 'Four score and seven years ago';
        
        window.webauthn.makeCredential(accountInfo, cryptoParameters, attestationChallenge)
            .then(function (creds) {

            	// Share credential information with server
            	sendToServerCredential(creds);
            	
            })
            .catch(function(reason) {
                // Windows Hello isn't setup, show dialog explaining how to set it up
                if (reason.message === 'NotSupportedError') {
                    showSetupWindowsHelloDialog(true);
                }
                log('Windows Hello failed (' + reason.message + ').');
            });
    } catch(ex) {
            // Windows Hello isn't setup, show dialog explaining how to set it up
            if (reason.message === 'NotSupportedError') {
                showSetupWindowsHelloDialog(true);
            }
            log('makeCredential() failed: ' + ex);  
      }
} 

// Authenticate the user
function getAssertion(e) {
	e.preventDefault();
	
    try {
    	var inId = document.getElementById('userId').value;
    	
         // The challenge is typically a random quantity generated by the server 
         // This ensures that any assertions are freshly generated and not replays
         var challenge = 'Our fathers brought forth on this continent, a new nation';
         var allowList = 
                    [
                        {
                            type: 'FIDO',
                            id: inId
                        }
                    ];

        window.webauthn.getAssertion(challenge, allowList)
        .then(function(sig) {
                // Assertion calls succeeds
                // Send assertion to the server
        	sendToServerAssertion(sig, challenge);
        })
        .catch(function(reason) {
            // No credential in the store. Fallback to password
            // Show dialog with failed authentication. Fallback to password. 
            log('getAssertion() failed: ' + reason);
        });               
    } catch (ex) {
        log('getAssertion() failed: ' + ex);
    }
}